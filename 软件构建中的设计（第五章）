设计是一项明确的活动

设计是一个险恶的问题
|
“险恶的”问题就是那种只有通过解决或部分解决才能被明确的问题；
最引人注目的一个例子是：
直到这座桥坍塌，工程师们才知道应该充分地考虑空气动力学的因素。只有通过建造大桥（即解决这个问题），他们才能学会从这一问题中应该额外考虑的环节，
从而才能建造出到现在依然矗立不倒的另一座桥梁；
|
想要通过一种理性的、不会犯错的方式从需求说明中推导出设计根本就不现实；
没有哪个系统是用这种方式设计出来的，以后也不可能有；即便是教科书和论文中的小型程序开发也是不真实的；
它们都是经过修订和修饰的，直到作者让我们看到他想要做到的结果，因而是不可能在实际中发生的过程；
 
设计是个了无章法的过程（即使它能得出清爽的成果）
|
因为在此过程中你会采取很多错误的步骤，你会犯很多的错误，事实上，犯错正是设计的关键所在；
还因为优、劣设计之间的差异往往非常微妙；
还因为你很难判断设计何时算是“足够好”了，一般最常见的回答是“到你没时间再做了为止”；
 
设计就是确定取舍和调整顺序的过程
|
衡量彼此冲突的各项设计特性（例如快速的反应速度，开发时间等），并尽力在其中寻求平衡；
 
设计受到诸多限制
|
这样才会促使产生简单的方案，并最终改善这一解决方案；
 
设计是不确定的
|
不同的人会有不同的设计，而每套设计都很不错；
 
设计是一个启发式过程
|
因为设计过程充满了不确定性，因此设计技术也就趋于具有探索性；
“经验法则”或者“试试没准能行的办法”，而不是保证能产生预期结果的可重复的过程；
 
设计是自然而然形成的
|
设计不是在谁的头脑中直接跳出来的；
它是在不断的设计评估、非正式讨论、写试验代码以及修改试验代码中演化和完善的；
 
软件并非是唯一会随时间变化而变化的结构。物理结构也会演变；
|
几乎所有的系统都在其开发的起始阶段经历过某种程度的设计变更，而当它们进入后续版本后通常都会进行更大的改变。
||
所以。。。就弄一个自己非常想做的一个小程序就行了，先不用管实现多复杂，先自由的天马行空的想自己想做的，抛开应用程序方面的（我觉得应用程序可能还是需要一个公司去运营）；
 
 
关键的设计概念
管理复杂度
|
偶然的难题和本质的难题
软件开发中大部分的偶然性难题在很久以前就得到解决了；
本质性苦难上的进展将会变得相对缓慢；
所有这些本质性困难的根源都在于复杂性——不论是本质的，还是偶然的；
|
人类心理：哈哈；
没有谁的大脑能容得下一个现代的计算机程序，
我们不应该试着在同一时间把整个程序都塞进自己的大脑，
而应该试着以某种方式去组织程序，以便能够在一个时刻可以专注于一个特定的部分。
|
这么做的目的是尽量减少在任一时间所要考虑的程序量；
可以把它想做是一种心理上的杂耍（边抛边接）——程序要求你在空中保持的（精神上的）球越多，你就越可能漏掉其中的某一个，从而导致设计或编码的错误；
|
在软件架构的层次上，
可以通过把整个系统分解为多个子系统来降低问题的复杂度；
|
人类心理：哈哈；
人类更易于理解许多项简单的信息，而不是一项复杂的信息；
子系统间的相互依赖越少，你就越容易在同一时间里专注问题的一小部分；
精心设计的对象关系使关注点相互分离，从而使你能在每个时刻只专注于一件事情；
|
人类心理：哈哈；
保持子程序的短小精悍也能帮助你减少思考的负担。
从问题的领域着手，而不是从底层实现的细节入手去编写程序，在最抽象的层次上工作，也能减少人的脑力负担；
|
人类心理：哈哈；
受着人类固有限制影响的程序员的底线，就是要写出既让自己容易理解，也能让别人容易看懂，而且很少有错误的程序代码；


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



