类的基础：抽象数据类型（ADTs）

程序员基于“语句-子程序-类”为基础思考编程问题；

抽象数据类型：是指一些数据以及对这些数据所进行的操作的集合。
            （其中“数据”一词的用法有些随意）

要想理解面向对象编程，首先要理解ADT；

抽象数据类型可以让你像在现实世界中一样操作实体，而不必在低层的实现上摆弄实体；

面向对象的编程语言能自动支持对同一ADT的多份实例的处理；

例子：写一个程序：控制文本的字体；
|
不使用ADT：
currentFont.size = 16;
子程序库：currentFont.size = PointsToPixels(12);
(备注，“.”后面的都是数据成员)
|
这些做法都存在一个限制：即要求调用方代码直接控制数据成员，这无疑限制了currentFont的使用；
